=begin
#Search Book API

#API to find library that has searching books.

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'cgi'

module OpenapiClient
  class V1Api
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Returns a list of libraries.
    # @param appkey [String] 
    # @param pref [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :city 
    # @option opts [String] :systemid 
    # @option opts [String] :geocode 
    # @option opts [String] :format 
    # @option opts [String] :callback 
    # @option opts [Integer] :limit 
    # @return [Array<Library>]
    def get_libraries(appkey, pref, opts = {})
      data, _status_code, _headers = get_libraries_with_http_info(appkey, pref, opts)
      data
    end

    # Returns a list of libraries.
    # @param appkey [String] 
    # @param pref [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :city 
    # @option opts [String] :systemid 
    # @option opts [String] :geocode 
    # @option opts [String] :format 
    # @option opts [String] :callback 
    # @option opts [Integer] :limit 
    # @return [Array<(Array<Library>, Integer, Hash)>] Array<Library> data, response status code and response headers
    def get_libraries_with_http_info(appkey, pref, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.get_libraries ...'
      end
      # verify the required parameter 'appkey' is set
      if @api_client.config.client_side_validation && appkey.nil?
        fail ArgumentError, "Missing the required parameter 'appkey' when calling V1Api.get_libraries"
      end
      # verify the required parameter 'pref' is set
      if @api_client.config.client_side_validation && pref.nil?
        fail ArgumentError, "Missing the required parameter 'pref' when calling V1Api.get_libraries"
      end
      # resource path
      local_var_path = '/library'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'appkey'] = appkey
      query_params[:'pref'] = pref
      query_params[:'city'] = opts[:'city'] if !opts[:'city'].nil?
      query_params[:'systemid'] = opts[:'systemid'] if !opts[:'systemid'].nil?
      query_params[:'geocode'] = opts[:'geocode'] if !opts[:'geocode'].nil?
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?
      query_params[:'callback'] = opts[:'callback'] if !opts[:'callback'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Library>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V1Api.get_libraries",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#get_libraries\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
